<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ooatuoo</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://atuo.xyz/"/>
  <updated>2016-12-05T03:02:24.000Z</updated>
  <id>http://atuo.xyz/</id>
  
  <author>
    <name>ooatuoo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于 unowned &amp; weak 的选择</title>
    <link href="http://atuo.xyz/unowned_weak/"/>
    <id>http://atuo.xyz/unowned_weak/</id>
    <published>2016-11-15T16:00:00.000Z</published>
    <updated>2016-12-05T03:02:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们在使用闭包的时候，经常会遇到循环强引用的情况。当你将一个闭包赋值给类实例的某个属性，并且这个闭包体中又使用了这个类实例时，便会产生循环强引用。举个例子：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeButton</span>: <span class="title">UIButton</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> tapHandler: (() -&gt; <span class="type">Void</span>)?</div><div class="line">    </div><div class="line">    <span class="keyword">deinit</span> &#123;</div><div class="line">      <span class="built_in">print</span>(<span class="string">"SomeButton is being deinitialized"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> aButton = <span class="type">SomeButton</span>()</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">    	<span class="keyword">super</span>.viewDidLoad()</div><div class="line">    	<span class="built_in">print</span>(<span class="string">"view did load"</span>)</div><div class="line">    	</div><div class="line">    	aButton.tapHandler = &#123;</div><div class="line">            <span class="keyword">self</span>.doSomething()</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">doSomething</span><span class="params">()</span></span> &#123; </div><div class="line">    	<span class="comment">// ...</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">deinit</span> &#123;</div><div class="line">    	<span class="built_in">print</span>(<span class="string">"ViewController is being deinitialized"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>当把这个 ViewController push 完在 pop 出去后，控制台输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">view did load</div></pre></td></tr></table></figure></p>
<p>显然，析构函数没有被调用，ViewController 和 SomeButton 的实例都没有被释放，因此，两者之间形成了循环强引用。</p>
<p>我们可以通过 Xcode8 新增的调试工具 Memory Graph 来查看上面的循环强引用，如下图：</p>
<p><img src="http://ogem1is2k.bkt.clouddn.com/static/weakunowned_snp_memgraph.png?imageView2/2/h/555" alt=""></p>
<p>在上面的例子中，当我们 push 这 ViewController 的时候，会生成一个 ViewController 的实例（为了方便说明，暂且把这个实例称做 aController）。从图中可以看出，aController 持有了 aButton 的强引用，aButton 的 tapHandler 闭包属性因调用了 aController 的 doSomething() 方法而持有了对 aController 的强引用，从而在 aController 与 aButton 之间形成了循环强引用。</p>
<h3 id="那么，这种情况该怎么解决呢？"><a href="#那么，这种情况该怎么解决呢？" class="headerlink" title="那么，这种情况该怎么解决呢？"></a>那么，这种情况该怎么解决呢？</h3><p>在Swift中，我们可以通过定义闭包的捕获列表(Capture List)来解决闭包和类实例之间的循环强引用。Swift 提供了<code>weak</code>(弱引用)和<code>unowned</code>(无主引用) 这两个关键字来声明捕获的引用类型。因此，我们可以将 tapHandler 修改成这样：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">aButton.tapHandler = &#123; [<span class="keyword">unowned</span> <span class="keyword">self</span>] <span class="keyword">in</span></div><div class="line">   <span class="keyword">self</span>.doSomething()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>或者这样</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">aButton.tapHandler = &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] <span class="keyword">in</span></div><div class="line">   <span class="keyword">self</span>?.doSomething()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当我们再次运行程序，执行 push 和 pop 操作，输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">view did load</div><div class="line">ViewController is being deinitialized</div><div class="line">SomeButton is being deinitialized</div></pre></td></tr></table></figure>
<p>ViewController 和 SomeButton 的实例都成功释放了，也就是说这两种写法都可以解决循环强引用的问题。</p>
<h3 id="那么，我们是用weak还是unowned呢？"><a href="#那么，我们是用weak还是unowned呢？" class="headerlink" title="那么，我们是用weak还是unowned呢？"></a>那么，我们是用<code>weak</code>还是<code>unowned</code>呢？</h3><p>Apple 在 <a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/AutomaticReferenceCounting.html" target="_blank" rel="external">《The Swift Programming Language》</a>中是这么说的：</p>
<blockquote>
<p>Define a capture in a closure as an unowned reference when the closure and the instance it captures will always refer to each other, and will always be deallocated at the same time.</p>
<p>Conversely, define a capture as a weak reference when the captured reference may become nil at some point in the future. </p>
</blockquote>
<p>意思是说：<br><u>在闭包和捕获的实例总是相互引用并且同时销毁时，将闭包内的捕获定义为<code>unowned</code>(无主引用)。</u><br><u>相反的，在被捕获的引用可能会变为nil时，将闭包内的捕获定义为 <code>weak</code>(弱引用)。</u></p>
<p>在上面的例子中，aButton 持有了 tapHandler，tapHandler 又持有了 aController，于是 aButton 和 aController “总是相互引用”，即两者都没有被外部的变量所引用。并且当 aController 被销毁的同时 aButton 肯定也被销毁了。所以，在这种情况下，用<code>unowned</code>就可以了。</p>
<p>那什么情况下需要用到<code>weak</code>呢？再举个栗子：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> workItem = <span class="type">DispatchWorkItem</span>(block: &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] <span class="keyword">in</span></div><div class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> strongSelf = <span class="keyword">self</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</div><div class="line">        strongSelf.updateUI()</div><div class="line">    &#125;)</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidAppear</span><span class="params">(<span class="number">_</span> animated: Bool)</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidAppear(animated)</div><div class="line">        <span class="type">DispatchQueue</span>.main.asyncAfter(deadline: .now() + <span class="number">2.33</span>, execute: workItem)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">updateUI</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="comment">// ...</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面是个延时操作的例子，如果声明为<code>unowned</code>(无主引用)，在还没有到达延迟的时间的时候，我们 pop 掉这个 ViewController 的话，程序就会 crash。因为无主引用是<strong>非可选类型</strong>，pop 掉这个 ViewController 后，闭包中捕获的 self (也就是ViewController的实例）已经被销毁了，这时候再访问被销毁的实例，程序肯定会奔溃的。</p>
<p>所以这里应该声明为<code>weak</code>(弱引用)，弱引用总是<strong>可选类型</strong>，当引用的实例被销毁后，弱引用的值会自动置为 nil，并且我们可以在闭包内检查它们是否存在。</p>
<p>当然，还有一些不会产生循环强引用，但需要使用<code>weak</code>来确保代码的安全性的情况。比如执行一些异步操作的时候，我们需要将闭包内捕获的 self 定义为<code>weak</code>，来应对 self 被提前释放掉，变为 nil 的情况：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="type">DispatchQueue</span>.global(qos: .background).async &#123; </div><div class="line">    [<span class="keyword">weak</span> <span class="keyword">self</span>] <span class="keyword">in</span></div><div class="line">    </div><div class="line">    <span class="keyword">if</span> <span class="keyword">let</span> sSelf = <span class="keyword">self</span> &#123;</div><div class="line">        sSelf.doSomething()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="为什么不一股脑儿都用weak呢？"><a href="#为什么不一股脑儿都用weak呢？" class="headerlink" title="为什么不一股脑儿都用weak呢？"></a>为什么不一股脑儿都用<code>weak</code>呢？</h2><p>其实从上面的几个例子看来，我们都使用<code>weak</code>是不会有什么问题的，而且使用<code>weak</code>的话，看上去好像会使代码<strong>更</strong>安全，其实不然。Apple 是这么建议的：</p>
<blockquote>
<p>If the captured reference will never become nil, it should always be captured as an unowned reference, rather than a weak reference.</p>
</blockquote>
<p>大概意思就是说：<br><u>如果我们能够确定所捕获的引用类型在闭包体的整个过程中不会被释放的话，就应该使用无主引用，而不是弱引用。</u></p>
<p>我想这大概是出于两方面的原因：</p>
<ol>
<li>通过<code>unowned</code>就可以解决的问题，如果使用<code>weak</code>，就会显得多此一举，有时候甚至还需要额外的强制展开和 strongSelf 的判断。</li>
<li><code>unowned</code>性能方面会更有优势。<a href="https://www.uraimo.com/2016/10/27/unowned-or-weak-lifetime-and-performance/" target="_blank" rel="external">这里</a>有篇关于<code>weak</code>和<code>unowned</code>在不同情况下的性能分析，<a href="https://twitter.com/jckarter/status/66736416505751552" target="_blank" rel="external">Twitter</a> 上也有 Chris Eidhof、 Joe Groff 等人关于这个话题的讨论，有兴趣的同学可以看下。</li>
</ol>
<p>当然，具体用<code>weak</code>还是<code>unowned</code>，我们还是需要根据实际情况来判断。但当我们了解了循环强引用的形成原因，以及<code>weak</code>和<code>unowned</code>的用法和机制后，处理起这些问题就会更加得心应手，<br>我们的代码也会更加简洁和安全。</p>
<h6 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h6><ul>
<li><a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/AutomaticReferenceCounting.html" target="_blank" rel="external">Automatic Reference Counting</a></li>
<li><a href="http://swifter.tips/retain-cycle/" target="_blank" rel="external">内存管理，WEAK 和 UNOWNED</a></li>
<li><a href="http://stackoverflow.com/questions/25377674/unowned-vs-weak-why-we-should-prefer-unowned" target="_blank" rel="external">unowned vs. weak. Why we should prefer unowned?</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们在使用闭包的时候，经常会遇到循环强引用的情况。当你将一个闭包赋值给类实例的某个属性，并且这个闭包体中又使用了这个类实例时，便会产生循环强引用。举个例子：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SomeButton&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;UIButton&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; tapHandler: (() -&amp;gt; &lt;span class=&quot;type&quot;&gt;Void&lt;/span&gt;)?&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;deinit&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;SomeButton is being deinitialized&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ViewController&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;UIViewController&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; aButton = &lt;span class=&quot;type&quot;&gt;SomeButton&lt;/span&gt;()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    	&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.viewDidLoad()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    	&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;view did load&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    	&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    	aButton.tapHandler = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.doSomething()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    	&lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;deinit&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    	&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;ViewController is being deinitialized&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="swift" scheme="http://atuo.xyz/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>从相册中获取 GIF 的一些小 Tip</title>
    <link href="http://atuo.xyz/fetch-gif/"/>
    <id>http://atuo.xyz/fetch-gif/</id>
    <published>2016-11-04T16:00:00.000Z</published>
    <updated>2016-12-05T05:43:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>在 iOS 8 的时候，Apple 推出了 <a href="https://developer.apple.com/reference/photos" target="_blank" rel="external">PhotoKit</a> 框架，提供了一系列丰富的接口，想了解 PhotoKit 的同学，可以看下 Apple 的示例：<a href="https://developer.apple.com/library/content/samplecode/UsingPhotosFramework/Introduction/Intro.html#//apple_ref/doc/uid/TP40014575" target="_blank" rel="external">Example app using Photos framework</a>。</p>
<h3 id="如何判断-GIF-资源"><a href="#如何判断-GIF-资源" class="headerlink" title="如何判断 GIF 资源"></a>如何判断 GIF 资源</h3><h4 id="1-获取-PHAsset-的资源对象-PHAssetResource，通过其-uniformTypeIdentifier-或-originalFilename-属性来判断是否为-GIF："><a href="#1-获取-PHAsset-的资源对象-PHAssetResource，通过其-uniformTypeIdentifier-或-originalFilename-属性来判断是否为-GIF：" class="headerlink" title="1. 获取 PHAsset 的资源对象 PHAssetResource，通过其 uniformTypeIdentifier 或 originalFilename 属性来判断是否为 GIF："></a>1. 获取 <code>PHAsset</code> 的资源对象 <code>PHAssetResource</code>，通过其 <code>uniformTypeIdentifier</code> 或 <code>originalFilename</code> 属性来判断是否为 GIF：</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">PHAsset</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> isGIF: <span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">let</span> resource = <span class="type">PHAssetResource</span>.asssetResources(<span class="keyword">for</span>: <span class="keyword">self</span>).first!</div><div class="line">  	</div><div class="line">  	<span class="comment">// 通过统一类型标识符(uniform type identifier) UTI 来判断</span></div><div class="line">  	<span class="keyword">let</span> uti = resource.uniformTypeIdentifier <span class="keyword">as</span> <span class="type">CFString</span></div><div class="line">	<span class="keyword">return</span> <span class="type">UTTypeConformsTo</span>(uti, kUTTypeGIF) </div><div class="line">	</div><div class="line">	<span class="comment">// 或者通过文件名后缀来判断</span></div><div class="line">	<span class="keyword">return</span> assetSource.originalFilename.hasSuffix(<span class="string">"GIF"</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>关于<code>PHAssetResource</code>，每个 PHAsset 对象都会引用一个或多个资源（resource），一个被修改过的图片的<code>PHAsset</code> 对象会包含图片编辑之前和之后的 resource，以及关于描述这次编辑的<code>PHAdjustmentData</code>对象的 resource。我们可以将一个修改过后的 GIF 的 <code>PHAsset</code> 所包含的 <code>PHAssetResource</code> 打印出来看下：</p>
<a id="more"></a>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> resources = <span class="type">PHAssetResource</span>.assetResources(<span class="keyword">for</span>: asset)</div><div class="line">resources.<span class="built_in">map</span> &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;</div><div class="line"></div><div class="line"><span class="comment">/* 输出：</span></div><div class="line">修改之前：</div><div class="line">&lt;PHInternalAssetResource: 0x6000002e0f80&gt; type=photo size=&#123;636, 400&#125; fileSize=668682 uti=com.compuserve.gif filename=IMG_0006.GIF assetLocalIdentifier=46ACADB2-357B-44B6-8837-4F686D2092BF/L0/001</div><div class="line"></div><div class="line">修改之后：</div><div class="line">&lt;PHInternalAssetResource: 0x6080000f2d80&gt; type=photo size=&#123;636, 400&#125; fileSize=668682 uti=public.jpeg filename=IMG_0006.GIF assetLocalIdentifier=46ACADB2-357B-44B6-8837-4F686D2092BF/L0/001</div><div class="line">&lt;PHInternalAssetResource: 0x6080000f3200&gt; type=photo_full size=&#123;636, 400&#125; fileSize=15481 uti=public.jpeg filename=FullSizeRender.jpg assetLocalIdentifier=46ACADB2-357B-44B6-8837-4F686D2092BF/L0/001</div><div class="line">&lt;PHInternalAssetResource: 0x6000000f2e80&gt; type=adjustment size=&#123;0, 0&#125; fileSize=776 uti=com.apple.property-list filename=Adjustments.plist assetLocalIdentifier=46ACADB2-357B-44B6-8837-4F686D2092BF/L0/001</div><div class="line">*/</div></pre></td></tr></table></figure>
<p>从打印出的信息可以看到，在 GIF 被修改之后，UTI 从<code>com.compuserve.gif</code>变成了 <code>public.jpeg</code> ，所以这里如果还通过 UTI 来判断的话，就会错漏，只能通过 fileName 来判断。</p>
<p>另外， <code>PHAssetResource</code> 类只支持 iOS 9.0+。</p>
<h4 id="2-通过获取-PHAsset-的元数据来判断："><a href="#2-通过获取-PHAsset-的元数据来判断：" class="headerlink" title="2. 通过获取 PHAsset 的元数据来判断："></a>2. 通过获取 <code>PHAsset</code> 的元数据来判断：</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> requestOption = <span class="type">PHImageRequestOptions</span>()</div><div class="line">requestOption.version = .unadjusted</div><div class="line">requestOption.isSynchronous = <span class="literal">false</span></div><div class="line"></div><div class="line"><span class="type">PHImageManager</span>.<span class="keyword">default</span>().requestImageData(<span class="keyword">for</span>: asset,</div><div class="line">                                          options: requestOption,</div><div class="line">                                          resultHandler: &#123; (data, uti, orientation, info) <span class="keyword">in</span></div><div class="line">	<span class="keyword">if</span> <span class="keyword">let</span> <span class="type">UTI</span> = uti, <span class="type">UTTypeConformsTo</span>(<span class="type">UTI</span> <span class="keyword">as</span> <span class="type">CFString</span>, kUTTypeGIF) &#123;</div><div class="line">		<span class="comment">// It's GIF</span></div><div class="line">	&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>同样，这里也需要考虑到 GIF 被修改的情况，<code>requestOption.version</code> 默认是 <code>current</code> ，即如果图片被修改过的话，返回的就是包含所有调整和修改的图像数据，因此我们需要将其设置为 <code>unadjusted</code> 来获取原始的图像数据。</p>
<p>相比上面的方法，这种方法更快速，用时更少。</p>
<h3 id="关于-localIdentifier"><a href="#关于-localIdentifier" class="headerlink" title="关于 localIdentifier"></a>关于 localIdentifier</h3><p><code>localIdentifier</code> 是 <code>PHAsset</code> 的父类 <code>PHObject</code> 的一个属性，是每个图片资源独有的标识符。</p>
<p>我在开发 <a href="https://github.com/atuooo/notGIF" target="_blank" rel="external">notGIF</a> 的时候，每次启动时都需要遍历相册中的所有图片来获取其中的 GIF，这个操作非常的耗时，十分影响用户体验。我尝试过将其拆分成多个任务，分发到多个线程同时进行，虽然有些效果，但还是不尽如人意，毕竟随着相册中照片数量的增加，其所消耗的时间是线性增长的。</p>
<p>这时候，<code>localIdentifier</code> 就有了用武之地。因为 <code>localIdentifier</code> 是识别图片资源的唯一标识符，所以，我们可以在第一次获取到相册中的 GIF 的时候，将其获取到的所有 GIF 的 <code>localIdentifier</code> 记录下来。这样，下次启动的时候，就可以通过这些 <code>localIdentifier</code> 来直接获取 GIF 资源：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> gifAssets = <span class="type">PHAsset</span>.fetchAssets(withLocalIdentifiers: gifIDs, options: fetchOptions)</div></pre></td></tr></table></figure>
<p>如果 <code>localIdentifier</code> 所对应的图片资源被删除或不存在的话，<code>PHAsset.fetchAssets(withLocalIdentifiers: options:)</code> 会自动过滤掉。同时，我们可以在后台去检测相册是否有变化，如果有，则更新 UI 以及 所存储的 <code>localIdentifier</code> 的信息。</p>
<h3 id="获取相册中图片的-url"><a href="#获取相册中图片的-url" class="headerlink" title="获取相册中图片的 url"></a>获取相册中图片的 url</h3><p>在适配 iMessage Extension 的时候，需要通过图片的 url 来获取和发送图片，PhotoKit 也提供了获取图片资源 url 的方法：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">asset.requestContentEditingInput(with: requestOptions,</div><div class="line">                                 completionHandler: &#123; (editingInput, info) <span class="keyword">in</span></div><div class="line">	<span class="keyword">if</span> <span class="keyword">let</span> input = editingInput, <span class="keyword">let</span> picURL = input.fullSizeImageURL &#123;</div><div class="line">		<span class="comment">// insert attachment</span></div><div class="line">	&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 iOS 8 的时候，Apple 推出了 &lt;a href=&quot;https://developer.apple.com/reference/photos&quot;&gt;PhotoKit&lt;/a&gt; 框架，提供了一系列丰富的接口，想了解 PhotoKit 的同学，可以看下 Apple 的示例：&lt;a href=&quot;https://developer.apple.com/library/content/samplecode/UsingPhotosFramework/Introduction/Intro.html#//apple_ref/doc/uid/TP40014575&quot;&gt;Example app using Photos framework&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&quot;如何判断-GIF-资源&quot;&gt;&lt;a href=&quot;#如何判断-GIF-资源&quot; class=&quot;headerlink&quot; title=&quot;如何判断 GIF 资源&quot;&gt;&lt;/a&gt;如何判断 GIF 资源&lt;/h3&gt;&lt;h4 id=&quot;1-获取-PHAsset-的资源对象-PHAssetResource，通过其-uniformTypeIdentifier-或-originalFilename-属性来判断是否为-GIF：&quot;&gt;&lt;a href=&quot;#1-获取-PHAsset-的资源对象-PHAssetResource，通过其-uniformTypeIdentifier-或-originalFilename-属性来判断是否为-GIF：&quot; class=&quot;headerlink&quot; title=&quot;1. 获取 PHAsset 的资源对象 PHAssetResource，通过其 uniformTypeIdentifier 或 originalFilename 属性来判断是否为 GIF：&quot;&gt;&lt;/a&gt;1. 获取 &lt;code&gt;PHAsset&lt;/code&gt; 的资源对象 &lt;code&gt;PHAssetResource&lt;/code&gt;，通过其 &lt;code&gt;uniformTypeIdentifier&lt;/code&gt; 或 &lt;code&gt;originalFilename&lt;/code&gt; 属性来判断是否为 GIF：&lt;/h4&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PHAsset&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; isGIF: &lt;span class=&quot;type&quot;&gt;Bool&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; resource = &lt;span class=&quot;type&quot;&gt;PHAssetResource&lt;/span&gt;.asssetResources(&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;: &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;).first!&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  	&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  	&lt;span class=&quot;comment&quot;&gt;// 通过统一类型标识符(uniform type identifier) UTI 来判断&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  	&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; uti = resource.uniformTypeIdentifier &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;CFString&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;UTTypeConformsTo&lt;/span&gt;(uti, kUTTypeGIF) &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 或者通过文件名后缀来判断&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; assetSource.originalFilename.hasSuffix(&lt;span class=&quot;string&quot;&gt;&quot;GIF&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;关于&lt;code&gt;PHAssetResource&lt;/code&gt;，每个 PHAsset 对象都会引用一个或多个资源（resource），一个被修改过的图片的&lt;code&gt;PHAsset&lt;/code&gt; 对象会包含图片编辑之前和之后的 resource，以及关于描述这次编辑的&lt;code&gt;PHAdjustmentData&lt;/code&gt;对象的 resource。我们可以将一个修改过后的 GIF 的 &lt;code&gt;PHAsset&lt;/code&gt; 所包含的 &lt;code&gt;PHAssetResource&lt;/code&gt; 打印出来看下：&lt;/p&gt;
    
    </summary>
    
    
      <category term="gif" scheme="http://atuo.xyz/tags/gif/"/>
    
  </entry>
  
</feed>
